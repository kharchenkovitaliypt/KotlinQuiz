apply plugin: 'org.jetbrains.kotlin.multiplatform'
apply plugin: 'com.android.library'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.squareup.sqldelight'

final frameworkName = 'CommonCode'

sqldelight {
    KotlinQuizDb {
        packageName = "com.test.kotlinquiz"
    }
}

android {
    compileSdkVersion 28

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/spek-dsl.kotlin_module'
        exclude 'META-INF/spek-runtime.kotlin_module'
        exclude 'META-INF/LICENSE-notice.md'
    }
}

kotlin {
    targets {
        android()

        def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") \
                              ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'ios') {
            binaries {
                framework(frameworkName)
            }
//            compilations.main {
//                extraOpts "-Xobjc-generics"
//                cinterops {
//                    myFramework {
//                        includeDirs "/Users/test/Library/Caches/AppCode2019.1/DerivedData" +
//                                "/myFramework-bjvyjyjnjglmmpflmzavfrxptklz" +
//                                "/Build/Products/Debug-iphonesimulator/myFramework.framework"
//                        defFile = file("/Users/test/Projects/KotlinQuiz/common/src/iosMain/cinterop/myFramework.def")
//                    }
//                }
//            }
        }
    }

    sourceSets {

        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$kotlinx_coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-io:$kotlinx_io_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$kotlinx_serialization_version"

                implementation "com.soywiz:klock-metadata:$klock_version"

//                implementation "io.ktor:ktor-client-core:$ktor_version"
//                implementation "io.ktor:ktor-client-json:$ktor_version"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
                implementation "org.spekframework.spek2:spek-dsl-metadata:$spek_version"
            }
        }
        androidMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinx_coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-io-jvm:$kotlinx_io_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlinx_serialization_version"
                implementation "androidx.lifecycle:lifecycle-extensions:2.0.0"
                implementation "com.soywiz:klock-android:$klock_version"
                implementation "com.squareup.sqldelight:android-driver:$sqldelight_version"
//                implementation "io.ktor:ktor-client-android:$ktor_version"
//                implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
            }
        }
        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation "org.spekframework.spek2:spek-dsl-jvm:$spek_version"
                runtimeOnly "org.spekframework.spek2:spek-runner-junit5:$spek_version"
                runtimeOnly kotlin('reflect')
            }
        }
        iosMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$kotlinx_coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-io-native:$kotlinx_io_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$kotlinx_serialization_version"
                implementation "com.soywiz:klock-iosx64:$klock_version"
                implementation "com.squareup.sqldelight:ios-driver:$sqldelight_version"
//                implementation "io.ktor:ktor-client-ios:$ktor_version"
//                implementation "io.ktor:ktor-client-ios-iosx64:$ktor_version"
//                implementation "io.ktor:ktor-client-json-native:$ktor_version"
            }
        }
    }
}

tasks.withType(Test) {
    useJUnitPlatform {
        includeEngines 'spek2'
    }
}

kotlin.sourceSets.all {
    languageSettings {
        useExperimentalAnnotation('kotlin.Experimental')
        progressiveMode = true // false by default
    }
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(projectDir.parent, "ios/xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.ios.binaries.getFramework(frameworkName, mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash" +
                    "\nexport 'JAVA_HOME=${System.getProperty("java.home")}'" +
                    "\ncd '${rootProject.rootDir}'" +
                    "\n./gradlew \$@" +
                    "\n"
            setExecutable(true)
        }
    }
}
tasks.build.dependsOn packForXCode

